@rendermode InteractiveServer
@page "/Results"
@page "/Results/{SearchQuery}"
@inject Indexer.Indexer Indexer
@inject ILogger<Results> Logger
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<PageTitle>Results</PageTitle>

<div class="results-wrapper">
    <a class="index-link" href="/unimplemented">Index</a>
    <div class="logo">
        <img src="logo.gif" alt="" style="text-align: center">
    </div>
    <div class="search-form">
        <form method="post" @onsubmit="Submit" @formname="results-search-query">
            <AntiforgeryToken></AntiforgeryToken>
            <InputText @bind-Value="SearchQueryFromResults!.Value"></InputText>
            <button>Search</button>
        </form>
    </div>
    <div>
    </div>
    <div class="content">
        <ul>
            @foreach (var result in SearchQueryResults!)
            {
                <a class="results" @onclick="() => Download(result.Key)">
                    <li>@GenerateResultString(result)</li>
                </a>
            }
        </ul>
    </div>
</div>

<script>
    function DownloadFile(filename, contentType, data) {
        const file = new File([data], filename, { type: contentType });
        const exportUrl = URL.createObjectURL(file);
        
        const a = document.createElement("a");
        document.body.appendChild(a);
        a.href = exportUrl;
        a.download = filename;
        a.target = "_self";
        a.click();
        
        URL.revokeObjectURL(exportUrl);
        a.remove();
    }
</script>

@code {
    [Parameter] public string? SearchQuery { get; set; }
    private List<KeyValuePair<string, double>>? SearchQueryResults { get; set; }
    [SupplyParameterFromForm] private ResultSearchQuery? SearchQueryFromResults { get; set; }
    const string ContentType = "application/octet-stream";


    protected override void OnInitialized()
    {
        SearchQueryResults ??= [];
        SearchQueryFromResults ??= new ResultSearchQuery();
        if (SearchQuery == null) return;
        SearchQueryResults = Indexer.QueryIndex(SearchQuery);
        SearchQueryResults.ForEach(kvp => Logger.LogInformation($"{kvp.Key} : {kvp.Value}"));
        SearchQueryFromResults.Value = SearchQuery;
    }

    private void Submit()
    {
        Logger.LogInformation($"Search query => {SearchQueryFromResults?.Value}");
        NavManager.NavigateTo($"/Results/{SearchQueryFromResults?.Value}");
    }

    private static string GenerateResultString(KeyValuePair<string, double> result)
    {
        return $"{result.Key} : {result.Value}";
    }

    private class ResultSearchQuery
    {
        public string? Value { get; set; }
    }

    private async void Download(string filePath)
    {
        var strings = filePath.Split("/");
        var fileName = strings[^1];
        var readAllBytes = await File.ReadAllBytesAsync(filePath);

        await JsRuntime.InvokeVoidAsync("DownloadFile", fileName, ContentType, readAllBytes);
    }

}